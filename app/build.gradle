apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    useLibrary 'org.apache.http.legacy'

    defaultConfig {
        applicationId "com.android.gallery3d"
        renderscriptTargetApi 18
        minSdkVersion 21
        targetSdkVersion 23
        versionCode 1000000
        versionName "1.0.0"
        renderscriptSupportModeEnabled true
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), '../proguard.flags'
        }
    }

    sourceSets {
        main {
            manifest.srcFile '../AndroidManifest.xml'
            java.srcDirs = ['../src', '../src_pd', '../gallerycommon/src']
            renderscript.srcDirs = aidl.srcDirs = resources.srcDirs = java.srcDirs
            res.srcDirs = ['../res']
            jni.srcDirs = []
            jniLibs.srcDirs = ['../libs']
        }
    }
}

dependencies {
    provided fileTree(dir: 'system_libraries', include: ['*.jar'])
    compile 'com.android.support:support-v13:23.3.0'
    compile 'com.adobe.xmp:xmpcore:5.1.2'
    compile 'com.googlecode.mp4parser:isoparser:1.0-RC-15'
}

task pushDownJdkDependency {
    def imlFile = file("app.iml")
    doLast {
        try {
            def parsedXml = (new XmlParser()).parse(imlFile)
            def jdkNode = parsedXml.component[1].orderEntry.find { it.'@type' == 'jdk' }

            parsedXml.component[1].remove(jdkNode)
            new Node(parsedXml.component[1], 'orderEntry', ['type': 'jdk', 'jdkName': "Android API 23 Platform", 'jdkType': 'Android SDK'])
            def writer = new StringWriter()
            new XmlNodePrinter(new PrintWriter(writer)).print(parsedXml)
            imlFile.text = writer.toString()

        } catch (FileNotFoundException e) {
            // iml not found
        }
    }
}

task fixAosp << {
    ant.replaceregexp(match: '^.*product="nosdcard".*$', replace: '', flags: 'g', byline: true) {
        fileset(dir: '../res/', includes: 'values*/*.xml')
    }
    delete '../res/drawable/filtershow_state_button_background'
}

preBuild.dependsOn('fixAosp')
preBuild.dependsOn('pushDownJdkDependency')

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs.add('-Xbootclasspath/p:app/system_libraries/android.jar')
    }
}